Texture2DArray g_BlendMap;
SamplerState g_BlendMap_sampler;

Texture2DArray g_BackgroundTexture;
SamplerState g_BackgroundTexture_sampler;

Texture2DArray g_RTexture;
SamplerState g_RTexture_sampler;

Texture2DArray g_GTexture;
SamplerState g_GTexture_sampler;

Texture2DArray g_BTexture;
SamplerState g_BTexture_sampler;

struct PSInput
{
    float4 Pos : SV_POSITION;
    float2 UV : TEX_COORD;
    float TexIndex : TEX_ARRAY_INDEX;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

void main(in PSInput PSIn,
          out PSOutput PSOut)
{
    // Se arma la coordenada de muestreo con el índice de slice
    float3 texCoord = float3(PSIn.UV, PSIn.TexIndex);

    float blendMultiplier = 1.5;
    float4 blendMapColour = saturate(g_BlendMap.Sample(g_BlendMap_sampler, texCoord) * blendMultiplier);

    float backTextureAmount = 1.0 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);

    float4 backgroundTextureColour = g_BackgroundTexture.Sample(g_BackgroundTexture_sampler, texCoord) * backTextureAmount;
    float4 rTextureColour = g_RTexture.Sample(g_RTexture_sampler, texCoord) * blendMapColour.r;
    float4 gTextureColour = g_GTexture.Sample(g_GTexture_sampler, texCoord) * blendMapColour.g;
    float4 bTextureColour = g_BTexture.Sample(g_BTexture_sampler, texCoord) * blendMapColour.b;

    float4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;

#if CONVERT_PS_OUTPUT_TO_GAMMA
    // Corrección gamma (opcional)
    totalColour.rgb = pow(totalColour.rgb, float3(1.0 / 2.2, 1.0 / 2.2, 1.0 / 2.2));
#endif

    PSOut.Color = totalColour;
}
